<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ParWeb', 'profit');

/**
 * BaseParWeb
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $id
 * @property string $url
 * @property string $usuario
 * @property string $password
 * @property string $db
 * @property string $server
 * @property string $co_zon
 * @property string $co_ven
 * @property string $co_seg
 * @property string $co_ing
 * @property string $co_sucur
 * @property string $co_alma
 * @property boolean $newclient
 * @property boolean $viewacc
 * @property boolean $viewdoc
 * @property boolean $idaslogin
 * @property boolean $negstock
 * @property boolean $sinstock
 * @property integer $round
 * @property boolean $desbyline
 * @property boolean $desbyart
 * @property boolean $desbycat
 * @property boolean $gobaldes
 * @property boolean $deliveryad
 * @property timestamp $maxoforder
 * @property string $prefijo
 * @property timestamp $fecha
 * @property string $unidad
 * @property string $roundtype
 * @property integer $meses
 * @property string $co_tran
 * @property string $f_pago
 * @property string $sqluser
 * @property string $sqlpass
 * @property integer $tipoaut
 * @property integer $largo
 * @property boolean $auto
 * @property integer $horas
 * @property integer $tipo
 * @property string $caja
 * @property string $visa
 * @property string $master
 * @property string $dep
 * @property string $authoriza
 * @property string $wsnumber
 * @property string $license
 * @property string $licensen
 * @property string $tipo_cli
 * @property boolean $slog
 * 
 * @method string    getId()         Returns the current record's "id" value
 * @method string    getUrl()        Returns the current record's "url" value
 * @method string    getUsuario()    Returns the current record's "usuario" value
 * @method string    getPassword()   Returns the current record's "password" value
 * @method string    getDb()         Returns the current record's "db" value
 * @method string    getServer()     Returns the current record's "server" value
 * @method string    getCoZon()      Returns the current record's "co_zon" value
 * @method string    getCoVen()      Returns the current record's "co_ven" value
 * @method string    getCoSeg()      Returns the current record's "co_seg" value
 * @method string    getCoIng()      Returns the current record's "co_ing" value
 * @method string    getCoSucur()    Returns the current record's "co_sucur" value
 * @method string    getCoAlma()     Returns the current record's "co_alma" value
 * @method boolean   getNewclient()  Returns the current record's "newclient" value
 * @method boolean   getViewacc()    Returns the current record's "viewacc" value
 * @method boolean   getViewdoc()    Returns the current record's "viewdoc" value
 * @method boolean   getIdaslogin()  Returns the current record's "idaslogin" value
 * @method boolean   getNegstock()   Returns the current record's "negstock" value
 * @method boolean   getSinstock()   Returns the current record's "sinstock" value
 * @method integer   getRound()      Returns the current record's "round" value
 * @method boolean   getDesbyline()  Returns the current record's "desbyline" value
 * @method boolean   getDesbyart()   Returns the current record's "desbyart" value
 * @method boolean   getDesbycat()   Returns the current record's "desbycat" value
 * @method boolean   getGobaldes()   Returns the current record's "gobaldes" value
 * @method boolean   getDeliveryad() Returns the current record's "deliveryad" value
 * @method timestamp getMaxoforder() Returns the current record's "maxoforder" value
 * @method string    getPrefijo()    Returns the current record's "prefijo" value
 * @method timestamp getFecha()      Returns the current record's "fecha" value
 * @method string    getUnidad()     Returns the current record's "unidad" value
 * @method string    getRoundtype()  Returns the current record's "roundtype" value
 * @method integer   getMeses()      Returns the current record's "meses" value
 * @method string    getCoTran()     Returns the current record's "co_tran" value
 * @method string    getFPago()      Returns the current record's "f_pago" value
 * @method string    getSqluser()    Returns the current record's "sqluser" value
 * @method string    getSqlpass()    Returns the current record's "sqlpass" value
 * @method integer   getTipoaut()    Returns the current record's "tipoaut" value
 * @method integer   getLargo()      Returns the current record's "largo" value
 * @method boolean   getAuto()       Returns the current record's "auto" value
 * @method integer   getHoras()      Returns the current record's "horas" value
 * @method integer   getTipo()       Returns the current record's "tipo" value
 * @method string    getCaja()       Returns the current record's "caja" value
 * @method string    getVisa()       Returns the current record's "visa" value
 * @method string    getMaster()     Returns the current record's "master" value
 * @method string    getDep()        Returns the current record's "dep" value
 * @method string    getAuthoriza()  Returns the current record's "authoriza" value
 * @method string    getWsnumber()   Returns the current record's "wsnumber" value
 * @method string    getLicense()    Returns the current record's "license" value
 * @method string    getLicensen()   Returns the current record's "licensen" value
 * @method string    getTipoCli()    Returns the current record's "tipo_cli" value
 * @method boolean   getSlog()       Returns the current record's "slog" value
 * @method ParWeb    setId()         Sets the current record's "id" value
 * @method ParWeb    setUrl()        Sets the current record's "url" value
 * @method ParWeb    setUsuario()    Sets the current record's "usuario" value
 * @method ParWeb    setPassword()   Sets the current record's "password" value
 * @method ParWeb    setDb()         Sets the current record's "db" value
 * @method ParWeb    setServer()     Sets the current record's "server" value
 * @method ParWeb    setCoZon()      Sets the current record's "co_zon" value
 * @method ParWeb    setCoVen()      Sets the current record's "co_ven" value
 * @method ParWeb    setCoSeg()      Sets the current record's "co_seg" value
 * @method ParWeb    setCoIng()      Sets the current record's "co_ing" value
 * @method ParWeb    setCoSucur()    Sets the current record's "co_sucur" value
 * @method ParWeb    setCoAlma()     Sets the current record's "co_alma" value
 * @method ParWeb    setNewclient()  Sets the current record's "newclient" value
 * @method ParWeb    setViewacc()    Sets the current record's "viewacc" value
 * @method ParWeb    setViewdoc()    Sets the current record's "viewdoc" value
 * @method ParWeb    setIdaslogin()  Sets the current record's "idaslogin" value
 * @method ParWeb    setNegstock()   Sets the current record's "negstock" value
 * @method ParWeb    setSinstock()   Sets the current record's "sinstock" value
 * @method ParWeb    setRound()      Sets the current record's "round" value
 * @method ParWeb    setDesbyline()  Sets the current record's "desbyline" value
 * @method ParWeb    setDesbyart()   Sets the current record's "desbyart" value
 * @method ParWeb    setDesbycat()   Sets the current record's "desbycat" value
 * @method ParWeb    setGobaldes()   Sets the current record's "gobaldes" value
 * @method ParWeb    setDeliveryad() Sets the current record's "deliveryad" value
 * @method ParWeb    setMaxoforder() Sets the current record's "maxoforder" value
 * @method ParWeb    setPrefijo()    Sets the current record's "prefijo" value
 * @method ParWeb    setFecha()      Sets the current record's "fecha" value
 * @method ParWeb    setUnidad()     Sets the current record's "unidad" value
 * @method ParWeb    setRoundtype()  Sets the current record's "roundtype" value
 * @method ParWeb    setMeses()      Sets the current record's "meses" value
 * @method ParWeb    setCoTran()     Sets the current record's "co_tran" value
 * @method ParWeb    setFPago()      Sets the current record's "f_pago" value
 * @method ParWeb    setSqluser()    Sets the current record's "sqluser" value
 * @method ParWeb    setSqlpass()    Sets the current record's "sqlpass" value
 * @method ParWeb    setTipoaut()    Sets the current record's "tipoaut" value
 * @method ParWeb    setLargo()      Sets the current record's "largo" value
 * @method ParWeb    setAuto()       Sets the current record's "auto" value
 * @method ParWeb    setHoras()      Sets the current record's "horas" value
 * @method ParWeb    setTipo()       Sets the current record's "tipo" value
 * @method ParWeb    setCaja()       Sets the current record's "caja" value
 * @method ParWeb    setVisa()       Sets the current record's "visa" value
 * @method ParWeb    setMaster()     Sets the current record's "master" value
 * @method ParWeb    setDep()        Sets the current record's "dep" value
 * @method ParWeb    setAuthoriza()  Sets the current record's "authoriza" value
 * @method ParWeb    setWsnumber()   Sets the current record's "wsnumber" value
 * @method ParWeb    setLicense()    Sets the current record's "license" value
 * @method ParWeb    setLicensen()   Sets the current record's "licensen" value
 * @method ParWeb    setTipoCli()    Sets the current record's "tipo_cli" value
 * @method ParWeb    setSlog()       Sets the current record's "slog" value
 * 
 * @package    gesser
 * @subpackage model
 * @author     Luis HernÃ¡ndez
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseParWeb extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('par_web');
        $this->hasColumn('id', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('url', 'string', 250, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(\'http://server.com/WS/SynchronizationService.asmx?wsdl\')',
             'primary' => false,
             'autoincrement' => false,
             'length' => 250,
             ));
        $this->hasColumn('usuario', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(\'softech\')',
             'primary' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('password', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(\'.*ö[({\')',
             'primary' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('db', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('server', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('co_zon', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('co_ven', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('co_seg', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('co_ing', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('co_sucur', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('co_alma', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('newclient', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('viewacc', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('viewdoc', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('idaslogin', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('negstock', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('sinstock', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('round', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('desbyline', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('desbyart', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('desbycat', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('gobaldes', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('deliveryad', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('maxoforder', 'timestamp', 16, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(\'01/01/2030\')',
             'primary' => false,
             'autoincrement' => false,
             'length' => 16,
             ));
        $this->hasColumn('prefijo', 'string', 5, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 5,
             ));
        $this->hasColumn('fecha', 'timestamp', 16, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(\'01/01/1900\')',
             'primary' => false,
             'autoincrement' => false,
             'length' => 16,
             ));
        $this->hasColumn('unidad', 'string', 1, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('roundtype', 'string', 1, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(\'0\')',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('meses', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(12)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('co_tran', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('f_pago', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('sqluser', 'string', 50, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('sqlpass', 'string', 180, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 180,
             ));
        $this->hasColumn('tipoaut', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(1)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('largo', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('auto', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('horas', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tipo', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(0)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('caja', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('visa', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('master', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('dep', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('authoriza', 'string', 100, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(\'0101010111101110\')',
             'primary' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('wsnumber', 'string', 100, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('license', 'string', 25, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('licensen', 'string', 50, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('tipo_cli', 'string', 6, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(space(1))',
             'primary' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('slog', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '(1)',
             'primary' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}